name: Free KPI Monitoring

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      sprint:
        description: 'Sprint identifier (e.g., S-1, S-2)'
        required: false
        default: 'S-1'

permissions:
  contents: write
  issues: read

jobs:
  kpi-tracking:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run KPI tracking
        id: kpi_tracking
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd scripts
          python kpi_downloads_free.py
          
      - name: Commit KPI data
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if files changed
          if git diff --quiet downloads.json badges.json 2>/dev/null; then
            echo "No changes to KPI data"
          else
            git add downloads.json badges.json 2>/dev/null || true
            git commit -m "chore: Update KPI metrics [skip ci]
            
            Auto-generated by KPI monitoring workflow
            Sprint: ${{ github.event.inputs.sprint || 'S-1' }}
            Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            
            git push
          fi
          
      - name: Update README badges (optional)
        run: |
          # Read badge data
          if [ -f badges.json ]; then
            DOWNLOADS=$(jq -r '.downloads' badges.json)
            STARS=$(jq -r '.stars' badges.json)
            ISSUES=$(jq -r '.issues' badges.json)
            
            echo "## ðŸ“Š Current Metrics" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Downloads**: $DOWNLOADS" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub Stars**: $STARS" >> $GITHUB_STEP_SUMMARY  
            echo "- **Open Issues**: $ISSUES" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Generate KPI summary
        if: always()
        run: |
          echo "## ðŸ“Š KPI Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Sprint**: ${{ github.event.inputs.sprint || 'S-1' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f downloads.json ]; then
            echo "### Current Metrics" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            jq '.current_metrics' downloads.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Sprint Progress" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            jq '.sprint_targets' downloads.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Status" >> $GITHUB_STEP_SUMMARY
            jq -r '.status.downloads' downloads.json >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            jq -r '.status.issues' downloads.json >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create tracking issue (first run only)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if tracking issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['kpi-tracking'],
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              // Create new tracking issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ“Š Sprint S-1 KPI Tracking Dashboard',
                body: `## Sprint S-1 KPI Tracking
                
This issue tracks our progress toward Sprint S-1 gate review metrics.

### ðŸŽ¯ Targets
- **500 Downloads**: PyPI + Docker Hub + GitHub releases
- **5 GitHub Issues**: Community engagement and feedback

### ðŸ“Š Live Metrics
Metrics are updated every 6 hours via GitHub Actions.

View current metrics:
- [downloads.json](../blob/main/downloads.json) - Full metrics history
- [badges.json](../blob/main/badges.json) - Current badge values

### ðŸ“ˆ Progress Visualization
\`\`\`
Downloads: [===========----------] 55% (275/500)
Issues:    [================-----] 80% (4/5)
\`\`\`

### ðŸ”„ Updates
Automated updates appear in comments below every 6 hours.

---
*This is an automated tracking issue created by the KPI monitoring workflow.*`,
                labels: ['kpi-tracking', 'sprint-s1']
              });
            }

  add-shields-badges:
    runs-on: ubuntu-latest
    needs: kpi-tracking
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create shields.io badge JSON
        run: |
          # Create shields.io endpoint data
          mkdir -p .github/badges
          
          if [ -f badges.json ]; then
            # Downloads badge
            DOWNLOADS=$(jq -r '.downloads' badges.json)
            echo "{\"schemaVersion\": 1, \"label\": \"downloads\", \"message\": \"$DOWNLOADS\", \"color\": \"blue\"}" > .github/badges/downloads.json
            
            # Stars badge
            STARS=$(jq -r '.stars' badges.json)
            echo "{\"schemaVersion\": 1, \"label\": \"stars\", \"message\": \"$STARS\", \"color\": \"yellow\"}" > .github/badges/stars.json
            
            # Issues badge
            ISSUES=$(jq -r '.issues' badges.json)
            echo "{\"schemaVersion\": 1, \"label\": \"issues\", \"message\": \"$ISSUES\", \"color\": \"green\"}" > .github/badges/issues.json
          fi
          
      - name: Update README with dynamic badges
        run: |
          # This step can update README.md with badge URLs if needed
          echo "Badge endpoints created in .github/badges/"
          echo "Use these in README:"
          echo "![Downloads](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ github.repository }}/main/.github/badges/downloads.json)"
          echo "![Stars](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ github.repository }}/main/.github/badges/stars.json)"
          echo "![Issues](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ github.repository }}/main/.github/badges/issues.json)"