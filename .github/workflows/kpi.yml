name: KPI Monitoring

on:
  schedule:
    # Run daily at 9 AM UTC (for Sprint S-1 gate review)
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      sprint:
        description: 'Sprint identifier (e.g., S-1, S-2)'
        required: false
        default: 'S-1'

permissions:
  contents: read
  issues: read

jobs:
  kpi-tracking:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run KPI tracking
        id: kpi_tracking
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        run: |
          cd scripts
          python kpi_downloads.py 2>&1 | tee ../kpi_output.log
          echo "kpi_exit_code=$?" >> $GITHUB_OUTPUT
          
      - name: Upload KPI artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: kpi-reports-${{ github.run_number }}
          path: |
            kpi_output.log
            kpi_report_*.json
          retention-days: 30
          
      - name: Generate KPI summary
        if: always()
        run: |
          echo "## üìä KPI Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Sprint**: ${{ github.event.inputs.sprint || 'S-1' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.kpi_tracking.outputs.kpi_exit_code }}" = "0" ]; then
            echo "‚úÖ **Status**: Gate review metrics achieved!" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.kpi_tracking.outputs.kpi_exit_code }}" = "1" ]; then
            echo "‚ö†Ô∏è **Status**: Download target met, need more GitHub issues" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.kpi_tracking.outputs.kpi_exit_code }}" = "2" ]; then
            echo "‚ö†Ô∏è **Status**: GitHub issues target met, need more downloads" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status**: Both targets need attention" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Detailed Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>View KPI Data</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat kpi_output.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          
      - name: Create issue on KPI alerts
        if: steps.kpi_tracking.outputs.kpi_exit_code != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const exitCode = '${{ steps.kpi_tracking.outputs.kpi_exit_code }}';
            const sprint = '${{ github.event.inputs.sprint || 'S-1' }}';
            
            let title = `üìä KPI Alert: Sprint ${sprint} Gate Review Metrics`;
            let body = `## KPI Alert - Sprint ${sprint}
            
            **Date**: ${new Date().toISOString().split('T')[0]}
            **Status**: `;
            
            if (exitCode === '1') {
              body += `‚ö†Ô∏è Download target met, need more GitHub issues
              
              ### Action Required
              - Current download target: ‚úÖ Achieved
              - GitHub issues target: ‚ùå Need more community engagement
              - Recommendation: Promote issue creation, add "good first issue" labels`;
            } else if (exitCode === '2') {
              body += `‚ö†Ô∏è GitHub issues target met, need more downloads
              
              ### Action Required  
              - Current download target: ‚ùå Need more package adoption
              - GitHub issues target: ‚úÖ Achieved
              - Recommendation: Increase marketing, social media, developer outreach`;
            } else {
              body += `‚ùå Both targets need attention
              
              ### Action Required
              - Current download target: ‚ùå Need more package adoption
              - GitHub issues target: ‚ùå Need more community engagement
              - Recommendation: Comprehensive marketing and community building`;
            }
            
            body += `
            
            ### üéØ Sprint ${sprint} Targets
            - **500 Downloads**: PyPI + Docker Hub + GitHub releases
            - **5 GitHub Issues**: Community engagement and feedback
            
            ### üìä Current Status
            See [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed metrics.
            
            ### üîÑ Next Steps
            1. Review KPI tracking data
            2. Implement recommended actions  
            3. Monitor progress daily
            4. Update stakeholders on gate review status
            
            **Reference**: cid-roadmap-v1 Sprint ${sprint}
            **Auto-generated**: KPI monitoring workflow`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['kpi-alert', 'sprint-gate-review', `sprint-${sprint.toLowerCase()}`]
            });
            
      - name: Notify Slack (if configured)
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ steps.kpi_tracking.outputs.kpi_exit_code }}" = "0" ]; then
            MESSAGE="üéâ Sprint S-1 gate review metrics achieved! Ready for Pilot-0."
            COLOR="good"
          else
            MESSAGE="‚ö†Ô∏è Sprint S-1 gate review needs attention. Check KPI dashboard."
            COLOR="warning"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\",\"color\":\"$COLOR\"}" \
            $SLACK_WEBHOOK_URL