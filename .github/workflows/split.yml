name: Split for AI Automation

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'ai-chunks/**'
      - '.chroma/**'
      - '*.md'
      - '.github/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  split-for-ai:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # 使用 requirements.txt 安装依赖
          pip install -r requirements.txt --no-cache-dir
          # 验证安装
          python -c "import tqdm; print('✅ tqdm installed:', tqdm.__version__)"
          pip list

      - name: Check OPENAI_API_KEY
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "❌ Error: OPENAI_API_KEY secret is not set"
            exit 1
          fi
          # 检查 key 的基本格式（不暴露完整 key）
          KEY_PREFIX=$(echo "${{ secrets.OPENAI_API_KEY }}" | cut -c1-7)
          KEY_LENGTH=${#OPENAI_API_KEY}
          echo "✅ OPENAI_API_KEY is set (prefix: ${KEY_PREFIX}..., length: ${KEY_LENGTH})"
          
          if [ "${{ secrets.OPENAI_API_KEY }}" = "***" ]; then
            echo "❌ Error: OPENAI_API_KEY appears to be masked placeholder"
            echo "Please set the actual API key in GitHub Secrets"
            exit 1
          fi
          
      - name: Clear old ChromaDB (migration)
        run: |
          if [ -d ".chroma" ]; then
            echo "🧹 Clearing old .chroma directory for migration..."
            rm -rf .chroma
          fi

      - name: Run split-for-ai script
        id: run_script
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANONYMIZED_TELEMETRY: "False"
          # 清除所有代理相关环境变量
          HTTP_PROXY: ""
          HTTPS_PROXY: ""
          NO_PROXY: "*"
          ALL_PROXY: ""
          OPENAI_PROXY: ""
          REQUESTS_CA_BUNDLE: ""
        run: |
          # 清除可能的环境变量
          unset http_proxy https_proxy no_proxy all_proxy HTTP_PROXY HTTPS_PROXY NO_PROXY ALL_PROXY
          
          echo "🔍 Running split-for-ai script..."
          
          # 运行脚本并捕获输出
          if python utils/split-for-ai.py --repo . --max-lines 800 --min-lines 50 --db .chroma --collection promptstrike 2>&1 | tee script_output.log; then
            echo "✅ Script execution completed successfully"
            echo "script_success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Script failed with exit code $?"
            echo "script_success=false" >> $GITHUB_OUTPUT
            cat script_output.log
            exit 1
          fi

      - name: Check for changes
        id: check_changes
        run: |
          mkdir -p ai-chunks .chroma
          if [ -d "ai-chunks" ] && [ "$(find ai-chunks -name '*.md' 2>/dev/null | wc -l)" -gt 0 ]; then
            # 只添加 ai-chunks 中的文件，跳过 .chroma
            git add -f ai-chunks/* || true
            if git diff --staged --quiet; then
              echo "changes=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No changes detected"
            else
              echo "changes=true" >> $GITHUB_OUTPUT
              echo "✅ Changes detected in ai-chunks"
            fi
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "⚠️ No ai-chunks files generated"
            if [ -f script_output.log ]; then
              echo "📋 Script output log:"
              cat script_output.log
            fi
          fi
          
      - name: Create/update ai-chunks-sync branch
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --local user.name 'github-actions[bot]'
          git config --local user.email '41898282+github-actions[bot]@users.noreply.github.com'
          
          if git ls-remote --exit-code --heads origin ai-chunks-sync >/dev/null 2>&1; then
            echo "📝 Updating existing ai-chunks-sync branch"
            git fetch origin ai-chunks-sync
            git checkout -B ai-chunks-sync origin/ai-chunks-sync
          else
            echo "🆕 Creating new ai-chunks-sync branch"
            git checkout -b ai-chunks-sync
          fi
          
          # 只从 main 分支获取 ai-chunks
          git checkout main -- ai-chunks/ 2>/dev/null || true
          git add -f ai-chunks/* || true
          
          git commit -m "chore: update AI chunks from $(git rev-parse --short HEAD)

          Auto-generated by split-for-ai.py
          Files processed: $(find ai-chunks -name '*.md' -type f 2>/dev/null | wc -l || echo '0')"
          
          git push origin ai-chunks-sync
          
      - name: Generate summary
        if: always()
        run: |
          echo "## 🤖 Split for AI Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.run_script.outputs.script_success }}" == "true" ]; then
            echo "✅ **Script Status**: Completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Script Status**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.check_changes.outputs.changes }}" == "true" ]; then
            echo "✅ **Changes**: AI chunks updated" >> $GITHUB_STEP_SUMMARY
            echo "📊 **Files processed**: $(find ai-chunks -name '*.md' -type f 2>/dev/null | wc -l || echo 'Unknown')" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Changes**: No changes detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f script_output.log ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>📋 Script Output Log</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -n 50 script_output.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
