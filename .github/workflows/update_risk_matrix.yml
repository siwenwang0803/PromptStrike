name: update-risk-matrix

on:
  push:
    paths:
      - "docs/RedForge/Security/Guardrail_Threat_Model.md"
      - "docs/RedForge/Security/ThreatModel/**"
      - "scripts/threat_to_jira.yml"
  pull_request:
    paths:
      - "docs/RedForge/Security/Guardrail_Threat_Model.md"
      - "docs/RedForge/Security/ThreatModel/**"
      - "scripts/threat_to_jira.yml"

permissions:
  contents: write
  pull-requests: write

jobs:
  update-risk-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Validate mapping file
        run: |
          python -c "
          import yaml
          with open('scripts/threat_to_jira.yml', 'r') as f:
              data = yaml.safe_load(f)
              print(f'✅ Validated {len(data)} threat mappings')
              for threat_id, jira_id in data.items():
                  if not threat_id or not jira_id:
                      raise ValueError(f'Invalid mapping: {threat_id} -> {jira_id}')
                  if not jira_id.startswith('PS-'):
                      raise ValueError(f'Invalid Jira ID format: {jira_id}')
          "

      - name: Update Risk Matrix (dry-run)
        run: |
          python scripts/update_risk_matrix.py --dry-run
        id: dry_run

      - name: Update Risk Matrix (main threat model)
        if: github.event_name == 'push'
        run: |
          python scripts/update_risk_matrix.py \
            --doc docs/RedForge/Security/Guardrail_Threat_Model.md \
            --map scripts/threat_to_jira.yml

      - name: Update Risk Matrix (modular files)
        if: github.event_name == 'push'
        run: |
          # Update modular threat model files if they exist
          if [ -f "docs/RedForge/Security/ThreatModel/06-risk-matrix.md" ]; then
            python scripts/update_risk_matrix.py \
              --doc docs/RedForge/Security/ThreatModel/06-risk-matrix.md \
              --map scripts/threat_to_jira.yml
          fi

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No changes detected"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "✅ Changes detected"
            git diff --name-only
          fi

      - name: Configure Git
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'push'
        run: |
          git add docs/RedForge/Security/
          git commit -m "chore(security): auto-update Jira links in risk matrix

          - Updated threat model risk matrices with Jira ticket links
          - Automated by update_risk_matrix.py
          - Triggered by threat_to_jira.yml changes
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push origin ${{ github.ref_name }}

      - name: Create PR comment (for pull requests)
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { exec } = require('child_process');
            const util = require('util');
            const execPromise = util.promisify(exec);
            
            try {
              const { stdout } = await execPromise('git diff --stat');
              const comment = `## 🔗 Risk Matrix Jira Links Update
              
              The risk matrix tables have been automatically updated with Jira ticket links:
              
              \`\`\`
              ${stdout}
              \`\`\`
              
              **Changes will be applied when this PR is merged.**
              
              🤖 Auto-generated by \`update_risk_matrix.py\``;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error creating PR comment:', error);
            }

  validate-threat-model:
    runs-on: ubuntu-latest
    needs: update-risk-matrix
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml markdown

      - name: Validate DREAD scores
        run: |
          python -c "
          import re
          import yaml
          
          # Read threat model
          with open('docs/RedForge/Security/Guardrail_Threat_Model.md', 'r') as f:
              content = f.read()
          
          # Extract DREAD scores
          dread_pattern = r'Risk Score.*?(\d+\.\d+)\/10'
          scores = re.findall(dread_pattern, content)
          
          print(f'✅ Found {len(scores)} DREAD scores')
          
          for score in scores:
              score_float = float(score)
              if not 0.0 <= score_float <= 10.0:
                  raise ValueError(f'Invalid DREAD score: {score}')
          
          print('✅ All DREAD scores are valid (0.0-10.0)')
          "

      - name: Check Jira link format
        run: |
          python -c "
          import re
          
          with open('docs/RedForge/Security/Guardrail_Threat_Model.md', 'r') as f:
              content = f.read()
          
          # Check for proper Jira link format
          jira_links = re.findall(r'\[PS-\d+\]\([^)]+\)', content)
          print(f'✅ Found {len(jira_links)} properly formatted Jira links')
          
          # Check for orphaned PS- references (should be linked)
          orphaned = re.findall(r'(?<!\[)PS-\d+(?!\])', content)
          if orphaned:
              print(f'⚠️ Found {len(orphaned)} unlinked PS- references: {orphaned[:5]}')
          else:
              print('✅ No orphaned PS- references found')
          "

      - name: Summary
        run: |
          echo "## 🎯 Risk Matrix Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Jira links automatically updated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ DREAD scores validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Link format verified" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Changes committed to repository" >> $GITHUB_STEP_SUMMARY