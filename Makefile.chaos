# Chaos Testing Makefile
# Provides convenient commands for running chaos tests

.PHONY: chaos-help chaos-install chaos-test chaos-report chaos-clean chaos-docker chaos-k8s
.DEFAULT_GOAL := chaos-help

# Configuration
CHAOS_CONFIG ?= chaos-config.yaml
CHAOS_ENVIRONMENT ?= development  
CHAOS_INTENSITY ?= 0.3
CHAOS_DURATION ?= 120
RESULTS_DIR ?= ./test-results
DOCKER_IMAGE ?= promptstrike-chaos
DOCKER_TAG ?= latest

# Colors for output
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

define print_green
	@echo -e "$(GREEN)$(1)$(NC)"
endef

define print_yellow
	@echo -e "$(YELLOW)$(1)$(NC)"
endef

define print_red
	@echo -e "$(RED)$(1)$(NC)"
endef

chaos-help: ## Show this help message
	@echo "Chaos Testing Commands:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Configuration Options:"
	@echo "  CHAOS_CONFIG        Config file path (default: chaos-config.yaml)"
	@echo "  CHAOS_ENVIRONMENT   Testing environment (default: development)"
	@echo "  CHAOS_INTENSITY     Chaos intensity 0.0-1.0 (default: 0.3)"
	@echo "  CHAOS_DURATION      Test duration in seconds (default: 120)"
	@echo "  RESULTS_DIR         Results output directory (default: ./test-results)"
	@echo ""
	@echo "Examples:"
	@echo "  make chaos-test                    # Run all chaos tests"
	@echo "  make chaos-test CHAOS_INTENSITY=0.5  # Run with higher intensity"
	@echo "  make chaos-mutation               # Run only mutation tests"
	@echo "  make chaos-docker                 # Run tests in Docker"
	@echo "  make chaos-report                 # Generate resilience report"

chaos-install: ## Install chaos testing dependencies
	$(call print_yellow,"Installing chaos testing dependencies...")
	poetry install --with chaos || pip install -r requirements-chaos.txt
	$(call print_green,"✓ Chaos testing dependencies installed")

chaos-validate: ## Validate chaos testing configuration
	$(call print_yellow,"Validating chaos configuration...")
	@python -c "from tests.chaos.config import validate_chaos_config; \
	issues = validate_chaos_config('$(CHAOS_CONFIG)'); \
	print('\\n'.join([f'❌ {issue}' for issue in issues]) if issues else '✓ Configuration is valid'); \
	exit(1) if issues else exit(0)"

chaos-validate-scenarios: ## Validate scenario compatibility for current environment
	$(call print_yellow,"Validating scenario compatibility...")
	@python -c "from tests.chaos.config import validate_scenario_compatibility, get_chaos_config; \
	import os; \
	config = get_chaos_config('$(CHAOS_CONFIG)'); \
	scenarios = config.chaos_replay.scenarios + config.mutation.types; \
	env = os.getenv('CHAOS_ENVIRONMENT', 'development'); \
	result = validate_scenario_compatibility(scenarios, env); \
	print(f'Compatibility Score: {result[\"compatibility_score\"]}/100'); \
	print(f'Risk Score: {result[\"risk_score\"]}'); \
	[print(f'⚠️  {c[\"message\"]}') for c in result['conflicts']]; \
	[print(f'💡 {rec}') for rec in result['recommendations'][:3]]; \
	exit(0 if result['compatible'] else 1)"

chaos-test: chaos-validate ## Run all chaos tests
	$(call print_yellow,"Running all chaos tests...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) && \
	export CHAOS_INTENSITY=$(CHAOS_INTENSITY) && \
	export CHAOS_DURATION=$(CHAOS_DURATION) && \
	export CHAOS_CONFIG_PATH=$(CHAOS_CONFIG) && \
	poetry run pytest tests/chaos/ -v \
		--junit-xml=$(RESULTS_DIR)/chaos-results.xml \
		--cov=tests.chaos \
		--cov-report=html:$(RESULTS_DIR)/coverage \
		--timeout=600
	$(call print_green,"✓ Chaos tests completed")

chaos-mutation: chaos-validate ## Run only mutation tests
	$(call print_yellow,"Running mutation tests...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) && \
	export CHAOS_INTENSITY=$(CHAOS_INTENSITY) && \
	poetry run pytest tests/chaos/ -k "mutation" -v \
		--junit-xml=$(RESULTS_DIR)/mutation-results.xml
	$(call print_green,"✓ Mutation tests completed")

chaos-replay: chaos-validate ## Run only chaos replay tests  
	$(call print_yellow,"Running chaos replay tests...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) && \
	export CHAOS_DURATION=$(CHAOS_DURATION) && \
	poetry run pytest tests/chaos/ -k "chaos_replay" -v \
		--junit-xml=$(RESULTS_DIR)/chaos-replay-results.xml
	$(call print_green,"✓ Chaos replay tests completed")

chaos-span: chaos-validate ## Run only span mutation tests
	$(call print_yellow,"Running span mutation tests...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) && \
	poetry run pytest tests/chaos/ -k "span" -v \
		--junit-xml=$(RESULTS_DIR)/span-mutation-results.xml
	$(call print_green,"✓ Span mutation tests completed")

chaos-gork: chaos-validate ## Run only gork generation tests
	$(call print_yellow,"Running gork generation tests...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) && \
	poetry run pytest tests/chaos/ -k "gork" -v \
		--junit-xml=$(RESULTS_DIR)/gork-results.xml
	$(call print_green,"✓ Gork generation tests completed")

chaos-report: ## Generate resilience report from test results
	$(call print_yellow,"Generating resilience report...")
	@if [ ! -d "$(RESULTS_DIR)" ] || [ -z "$$(ls -A $(RESULTS_DIR)/*.xml 2>/dev/null)" ]; then \
		echo "$(RED)No test results found. Run chaos tests first.$(NC)"; \
		exit 1; \
	fi
	@poetry run python -m tests.chaos.resilience_scorer \
		--results-path $(RESULTS_DIR) \
		--output-path $(RESULTS_DIR)/resilience-report.json \
		--format json
	@poetry run python -m tests.chaos.resilience_scorer \
		--results-path $(RESULTS_DIR) \
		--output-path $(RESULTS_DIR)/resilience-report.html \
		--format html
	$(call print_green,"✓ Resilience report generated")
	@echo "Reports available at:"
	@echo "  JSON: $(RESULTS_DIR)/resilience-report.json"
	@echo "  HTML: $(RESULTS_DIR)/resilience-report.html"

chaos-trends: ## Generate trend analysis and visualizations
	$(call print_yellow,"Generating trend analysis...")
	@poetry run python -c "
from tests.chaos.reporting import ChaosReportingManager
manager = ChaosReportingManager(output_path='$(RESULTS_DIR)')
trends = manager.analyze_trends(days=30)
if trends:
    manager.generate_trend_visualization(days=30, output_file='$(RESULTS_DIR)/trends.png')
    print('✓ Trend analysis completed')
    print('Visualization: $(RESULTS_DIR)/trends.png')
else:
    print('No historical data available for trend analysis')
"

chaos-export: ## Export historical data
	$(call print_yellow,"Exporting historical chaos testing data...")
	@poetry run python -c "
from tests.chaos.reporting import ChaosReportingManager
manager = ChaosReportingManager(output_path='$(RESULTS_DIR)')
result = manager.export_historical_data(format_type='csv', days=90)
print(f'✓ {result}')
"

chaos-clean: ## Clean up chaos test results and temporary files
	$(call print_yellow,"Cleaning up chaos test artifacts...")
	@rm -rf $(RESULTS_DIR)
	@rm -rf .pytest_cache
	@rm -rf tests/chaos/__pycache__
	@rm -rf tests/chaos/.pytest_cache
	@find . -name "*.pyc" -delete
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	$(call print_green,"✓ Cleanup completed")

chaos-docker-build: ## Build chaos testing Docker image
	$(call print_yellow,"Building chaos testing Docker image...")
	@docker build -f docker/Dockerfile.chaos -t $(DOCKER_IMAGE):$(DOCKER_TAG) .
	$(call print_green,"✓ Docker image built: $(DOCKER_IMAGE):$(DOCKER_TAG)")

chaos-docker: chaos-docker-build ## Run chaos tests in Docker container
	$(call print_yellow,"Running chaos tests in Docker...")
	@mkdir -p $(RESULTS_DIR)
	@docker run --rm \
		-v $(PWD)/$(RESULTS_DIR):/app/results \
		-v $(PWD)/$(CHAOS_CONFIG):/app/chaos-config.yaml:ro \
		-e CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) \
		-e CHAOS_INTENSITY=$(CHAOS_INTENSITY) \
		-e CHAOS_DURATION=$(CHAOS_DURATION) \
		--memory=2g \
		--cpus=1.0 \
		$(DOCKER_IMAGE):$(DOCKER_TAG)
	$(call print_green,"✓ Docker chaos tests completed")

chaos-docker-shell: chaos-docker-build ## Start interactive shell in chaos testing container
	$(call print_yellow,"Starting interactive shell in chaos container...")
	@docker run --rm -it \
		-v $(PWD)/$(RESULTS_DIR):/app/results \
		-v $(PWD)/$(CHAOS_CONFIG):/app/chaos-config.yaml:ro \
		-e CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) \
		--memory=2g \
		--cpus=1.0 \
		$(DOCKER_IMAGE):$(DOCKER_TAG) shell

chaos-k8s-apply: ## Deploy chaos testing to Kubernetes
	$(call print_yellow,"Deploying chaos testing to Kubernetes...")
	@kubectl apply -f k8s/chaos-testing-namespace.yaml
	@kubectl apply -f k8s/chaos-testing-pod.yaml
	$(call print_green,"✓ Chaos testing deployed to Kubernetes")
	@echo "Monitor with: kubectl logs -f job/chaos-testing-job -n chaos-testing"

chaos-k8s-logs: ## View Kubernetes chaos testing logs
	@kubectl logs -f job/chaos-testing-job -n chaos-testing

chaos-k8s-results: ## Download results from Kubernetes
	$(call print_yellow,"Downloading results from Kubernetes...")
	@mkdir -p $(RESULTS_DIR)/k8s
	@kubectl cp chaos-testing/chaos-testing-job:/app/results $(RESULTS_DIR)/k8s/ || true
	@kubectl cp chaos-testing/chaos-testing-job:/app/artifacts $(RESULTS_DIR)/k8s/ || true
	$(call print_green,"✓ Results downloaded to $(RESULTS_DIR)/k8s/")

chaos-k8s-clean: ## Clean up Kubernetes chaos testing resources
	$(call print_yellow,"Cleaning up Kubernetes resources...")
	@kubectl delete -f k8s/chaos-testing-pod.yaml --ignore-not-found=true
	@kubectl delete -f k8s/chaos-testing-namespace.yaml --ignore-not-found=true
	$(call print_green,"✓ Kubernetes resources cleaned up")

chaos-ci: chaos-validate ## Run chaos tests optimized for CI environment
	$(call print_yellow,"Running chaos tests for CI...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=ci && \
	export CHAOS_INTENSITY=0.5 && \
	export CHAOS_DURATION=60 && \
	export CHAOS_CONFIG_PATH=$(CHAOS_CONFIG) && \
	poetry run pytest tests/chaos/ -v \
		--junit-xml=$(RESULTS_DIR)/chaos-ci-results.xml \
		--tb=short \
		--timeout=300 \
		-x  # Stop on first failure for faster CI
	$(call print_green,"✓ CI chaos tests completed")

chaos-monitor: ## Monitor system resources during chaos tests
	$(call print_yellow,"Starting resource monitoring...")
	@echo "Monitoring system resources. Press Ctrl+C to stop."
	@while true; do \
		echo "$$(date): CPU: $$(top -bn1 | grep 'Cpu(s)' | awk '{print $$2}') Memory: $$(free -h | grep Mem | awk '{print $$3 "/" $$2}')"; \
		sleep 5; \
	done

chaos-benchmark: chaos-validate ## Run chaos tests with performance benchmarking
	$(call print_yellow,"Running chaos tests with benchmarking...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) && \
	time poetry run pytest tests/chaos/ -v \
		--junit-xml=$(RESULTS_DIR)/benchmark-results.xml \
		--benchmark-only \
		--benchmark-save=chaos_benchmark
	$(call print_green,"✓ Benchmark completed")

chaos-security-scan: ## Run security-focused chaos tests
	$(call print_yellow,"Running security-focused chaos tests...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) && \
	poetry run pytest tests/chaos/ -k "security or injection or xss or sql" -v \
		--junit-xml=$(RESULTS_DIR)/security-chaos-results.xml
	$(call print_green,"✓ Security chaos tests completed")

chaos-lightweight: ## Run lightweight chaos tests for resource-constrained environments
	$(call print_yellow,"Running lightweight chaos tests...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) && \
	export CHAOS_LIGHTWEIGHT_ENABLED=true && \
	export CHAOS_LIGHTWEIGHT_PROFILE=standard && \
	poetry run pytest tests/chaos/test_lightweight_mode.py -v \
		--junit-xml=$(RESULTS_DIR)/lightweight-results.xml
	$(call print_green,"✓ Lightweight chaos tests completed")

chaos-ultra-light: ## Run ultra-lightweight tests for very constrained environments  
	$(call print_yellow,"Running ultra-lightweight chaos tests...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) && \
	export CHAOS_LIGHTWEIGHT_ENABLED=true && \
	export CHAOS_LIGHTWEIGHT_PROFILE=ultra_light && \
	export CHAOS_LIGHTWEIGHT_MEMORY_MB=256 && \
	export CHAOS_LIGHTWEIGHT_CPU_CORES=0.25 && \
	export CHAOS_LIGHTWEIGHT_DURATION=15 && \
	poetry run pytest tests/chaos/test_lightweight_mode.py -v \
		--junit-xml=$(RESULTS_DIR)/ultra-light-results.xml
	$(call print_green,"✓ Ultra-lightweight chaos tests completed")

chaos-sme: ## Run SME-optimized chaos tests  
	$(call print_yellow,"Running SME-optimized chaos tests...")
	@mkdir -p $(RESULTS_DIR)
	@export CHAOS_ENVIRONMENT=$(CHAOS_ENVIRONMENT) && \
	export CHAOS_LIGHTWEIGHT_ENABLED=true && \
	export CHAOS_LIGHTWEIGHT_PROFILE=standard && \
	export CHAOS_LIGHTWEIGHT_MEMORY_MB=512 && \
	export CHAOS_LIGHTWEIGHT_CPU_CORES=0.5 && \
	poetry run python -c "\
	import asyncio; \
	from tests.chaos.lightweight_mode import run_sme_chaos_test; \
	result = asyncio.run(run_sme_chaos_test(duration_minutes=2)); \
	print(f'SME Test Results:'); \
	print(f'  Success: {result[\"success\"]}'); \
	print(f'  Tests Executed: {result.get(\"test_summary\", {}).get(\"executed\", 0)}'); \
	print(f'  Efficiency Score: {result.get(\"resource_usage\", {}).get(\"efficiency_score\", 0)}%'); \
	[print(f'  💡 {rec}') for rec in result.get('recommendations', [])[:3]]; \
	"
	$(call print_green,"✓ SME chaos tests completed")

chaos-resource-check: ## Check system resources for lightweight mode compatibility
	$(call print_yellow,"Checking system resources...")
	@poetry run python -c "\
	import psutil; \
	from tests.chaos.lightweight_mode import LightweightProfileSelector, get_resource_requirements; \
	print('System Resources:'); \
	print(f'  Memory: {psutil.virtual_memory().total // 1024 // 1024}MB'); \
	print(f'  CPU Cores: {psutil.cpu_count()}'); \
	print(''); \
	profile = LightweightProfileSelector.auto_select(); \
	print(f'Recommended Profile: {profile.memory_limit_mb}MB / {profile.cpu_cores} cores'); \
	print(''); \
	for profile_name in ['ultra_light', 'standard', 'balanced']: \
		req = get_resource_requirements(profile_name); \
		print(f'{profile_name.title()} Profile:'); \
		print(f'  Requires: {req[\"memory_required_mb\"]}MB / {req[\"cpu_cores_required\"]} cores'); \
		print(f'  Suitable for: {req[\"suitable_for\"]}'); \
		print(''); \
	"

chaos-status: ## Show current chaos testing status and configuration
	@echo "Chaos Testing Status:"
	@echo "===================="
	@echo "Configuration file: $(CHAOS_CONFIG)"
	@echo "Environment: $(CHAOS_ENVIRONMENT)"
	@echo "Intensity: $(CHAOS_INTENSITY)"
	@echo "Duration: $(CHAOS_DURATION)"
	@echo "Results directory: $(RESULTS_DIR)"
	@echo ""
	@echo "Recent test results:"
	@if [ -d "$(RESULTS_DIR)" ]; then \
		ls -la $(RESULTS_DIR)/*.xml 2>/dev/null | head -5 || echo "No test results found"; \
	else \
		echo "Results directory does not exist"; \
	fi
	@echo ""
	@echo "Available make targets:"
	@$(MAKE) chaos-help --no-print-directory

# Utility targets
.PHONY: chaos-requirements-check
chaos-requirements-check:
	@python -c "
import sys
try:
    import pytest
    import yaml
    import pandas
    import matplotlib
    print('✓ All required dependencies are available')
except ImportError as e:
    print(f'✗ Missing dependency: {e}')
    print('Run: make chaos-install')
    sys.exit(1)
"