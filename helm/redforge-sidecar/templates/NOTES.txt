🎉 PromptStrike Guardrail Sidecar has been deployed successfully!

📋 Deployment Summary:
==================
Namespace: {{ include "promptstrike-sidecar.namespaceName" . }}
Release:   {{ .Release.Name }}
Chart:     {{ .Chart.Name }}-{{ .Chart.Version }}

🔐 Security Features Enabled:
{{- if .Values.opa.enabled }}
✅ OPA Gatekeeper policies
{{- end }}
{{- if .Values.resourceQuota.enabled }}
✅ Resource quotas
{{- end }}
{{- if .Values.limitRange.enabled }}
✅ Limit ranges
{{- end }}
{{- if .Values.networkPolicy.enabled }}
✅ Network policies
{{- end }}
{{- if .Values.podDisruptionBudget.enabled }}
✅ Pod disruption budget
{{- end }}

📊 Monitoring:
{{- if .Values.monitoring.enabled }}
✅ Prometheus metrics enabled
   Metrics endpoint: http://{{ include "promptstrike-sidecar.fullname" . }}:{{ .Values.monitoring.prometheus.port }}{{ .Values.monitoring.prometheus.path }}
{{- if .Values.monitoring.serviceMonitor.enabled }}
✅ ServiceMonitor created for Prometheus Operator
{{- end }}
{{- else }}
❌ Monitoring disabled
{{- end }}

🚀 Access Your Application:

{{- if .Values.ingress.enabled }}
🌐 **Ingress Access (Recommended for Production):**
{{- range .Values.ingress.hosts }}
   - Primary API: https://{{ .host }}
   - Health Check: https://{{ .host }}/health
   - Metrics Endpoint: https://{{ .host }}/security/metrics
{{- end }}

{{- if .Values.ingress.tls }}
🔒 **TLS Configuration:**
   Certificate automatically managed via cert-manager
   Rate limiting: {{ .Values.ingress.rateLimit.requests }} requests per {{ .Values.ingress.rateLimit.window }}
{{- end }}
{{- end }}

{{- if .Values.app.enabled }}
📱 **Local Access (Development/Testing):**
{{- if contains "NodePort" .Values.service.type }}
   export NODE_PORT=$(kubectl get --namespace {{ include "promptstrike-sidecar.namespaceName" . }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "promptstrike-sidecar.fullname" . }})
   export NODE_IP=$(kubectl get nodes --namespace {{ include "promptstrike-sidecar.namespaceName" . }} -o jsonpath="{.items[0].status.addresses[0].address}")
   echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
   NOTE: It may take a few minutes for the LoadBalancer IP to be available.
   export SERVICE_IP=$(kubectl get svc --namespace {{ include "promptstrike-sidecar.namespaceName" . }} {{ include "promptstrike-sidecar.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
   echo http://$SERVICE_IP:{{ .Values.service.app.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
   kubectl --namespace {{ include "promptstrike-sidecar.namespaceName" . }} port-forward svc/{{ include "promptstrike-sidecar.fullname" . }} {{ .Values.service.app.port }}:{{ .Values.service.app.port }}
   echo "Visit http://127.0.0.1:{{ .Values.service.app.port }} to use your application"
{{- end }}
{{- end }}

{{- if .Values.sidecar.enabled }}

2. Access the guardrail sidecar:
   kubectl --namespace {{ include "promptstrike-sidecar.namespaceName" . }} port-forward svc/{{ include "promptstrike-sidecar.fullname" . }} {{ .Values.service.sidecar.port }}:{{ .Values.service.sidecar.port }}
   echo "Visit http://127.0.0.1:{{ .Values.service.sidecar.port }}/health to check sidecar health"
{{- end }}

📊 View Metrics and Logs:

1. Check pod status:
   kubectl get pods -n {{ include "promptstrike-sidecar.namespaceName" . }}

2. View logs:
{{- if .Values.app.enabled }}
   kubectl logs -n {{ include "promptstrike-sidecar.namespaceName" . }} -l app.kubernetes.io/name={{ include "promptstrike-sidecar.name" . }} -c app
{{- end }}
{{- if .Values.sidecar.enabled }}
   kubectl logs -n {{ include "promptstrike-sidecar.namespaceName" . }} -l app.kubernetes.io/name={{ include "promptstrike-sidecar.name" . }} -c sidecar
{{- end }}

3. View security reports:
   kubectl exec -n {{ include "promptstrike-sidecar.namespaceName" . }} deployment/{{ include "promptstrike-sidecar.fullname" . }} -c sidecar -- ls -la /var/reports

{{- if .Values.monitoring.loki.enabled }}
4. Aggregate logs with Loki:
   kubectl port-forward -n monitoring svc/loki 3100:3100
   echo "View logs at http://localhost:3100"
{{- end }}

⚙️ Configuration:

1. View current configuration:
   kubectl get configmap -n {{ include "promptstrike-sidecar.namespaceName" . }} {{ include "promptstrike-sidecar.fullname" . }} -o yaml

2. Update configuration:
   helm upgrade {{ .Release.Name }} {{ .Chart.Name }} -f your-values.yaml

🔧 OPA Gatekeeper Policies:
{{- if .Values.opa.enabled }}

Check active constraints:
   kubectl get constraints -n {{ include "promptstrike-sidecar.namespaceName" . }}

View policy violations:
   kubectl describe constraints -n {{ include "promptstrike-sidecar.namespaceName" . }}
{{- else }}

OPA Gatekeeper is disabled. To enable:
   helm upgrade {{ .Release.Name }} {{ .Chart.Name }} --set opa.enabled=true
{{- end }}

🎯 Resource Management:
{{- if .Values.resourceQuota.enabled }}

Current resource usage:
   kubectl describe resourcequota -n {{ include "promptstrike-sidecar.namespaceName" . }}
{{- end }}

{{- if .Values.limitRange.enabled }}

Resource limits:
   kubectl describe limitrange -n {{ include "promptstrike-sidecar.namespaceName" . }}
{{- end }}

📚 Documentation:

For more information, visit:
- GitHub: https://github.com/siwenwang0803/PromptStrike
- Documentation: https://github.com/siwenwang0803/PromptStrike/docs

🐛 Troubleshooting:

If you encounter issues:
1. Check pod events: kubectl describe pod -n {{ include "promptstrike-sidecar.namespaceName" . }}
2. Verify RBAC permissions: kubectl auth can-i --list --as=system:serviceaccount:{{ include "promptstrike-sidecar.namespaceName" . }}:{{ include "promptstrike-sidecar.serviceAccountName" . }}
3. Check OPA violations: kubectl get events -n {{ include "promptstrike-sidecar.namespaceName" . }} --field-selector reason=FailedMount

Happy monitoring! 🚀✨