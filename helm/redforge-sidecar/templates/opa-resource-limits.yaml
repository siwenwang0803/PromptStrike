{{- if .Values.opa.enabled }}
{{- if .Values.opa.securityPolicies.enforceResourceLimits }}
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredresources
  namespace: {{ include "promptstrike-sidecar.namespaceName" . }}
  labels:
    {{- include "promptstrike-sidecar.labels" . | nindent 4 }}
    app.kubernetes.io/component: opa-policy
  annotations:
    description: "Requires that all containers have resource limits and requests set"
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredResources
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            exemptImages:
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded
                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)
                to avoid unexpectedly exempting images from an untrusted repository.
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredresources
        
        missing(obj, field) = true {
          not obj[field]
        }
        
        missing(obj, field) = true {
          obj[field] == ""
        }
        
        canonify_cpu(orig) = new {
          is_string(orig)
          not contains(orig, "m")
          re_match("^[0-9]+$", orig)
          new := sprintf("%sm", [orig])
        }
        
        canonify_cpu(orig) = new {
          is_string(orig)
          contains(orig, "m")
          new := orig
        }
        
        canonify_cpu(orig) = new {
          is_number(orig)
          new := sprintf("%dm", [orig * 1000])
        }
        
        # 10 ** 21
        mem_multiple("E") = 1000000000000000000000 { true }
        
        # 10 ** 18
        mem_multiple("P") = 1000000000000000000 { true }
        
        # 10 ** 15
        mem_multiple("T") = 1000000000000000 { true }
        
        # 10 ** 12
        mem_multiple("G") = 1000000000000 { true }
        
        # 10 ** 9
        mem_multiple("M") = 1000000000 { true }
        
        # 10 ** 6
        mem_multiple("k") = 1000000 { true }
        
        # 10 ** 3
        mem_multiple("") = 1000 { true }
        
        # Kubernetes accepts the power-of-2 suffixes.
        # 2 ** 60
        mem_multiple("Ei") = 1152921504606846976 { true }
        
        # 2 ** 50
        mem_multiple("Pi") = 1125899906842624 { true }
        
        # 2 ** 40
        mem_multiple("Ti") = 1099511627776 { true }
        
        # 2 ** 30
        mem_multiple("Gi") = 1073741824 { true }
        
        # 2 ** 20
        mem_multiple("Mi") = 1048576 { true }
        
        # 2 ** 10
        mem_multiple("Ki") = 1024 { true }
        
        get_suffix(mem) = suffix {
          count(mem) > 0
          suffix := substring(mem, count(mem) - 2, -1)
          mem_multiple(suffix)
        }
        
        get_suffix(mem) = suffix {
          count(mem) > 0
          suffix := substring(mem, count(mem) - 1, -1)
          mem_multiple(suffix)
        }
        
        get_suffix(mem) = "" {
          count(mem) > 0
          not mem_multiple(substring(mem, count(mem) - 2, -1))
          not mem_multiple(substring(mem, count(mem) - 1, -1))
        }
        
        get_suffix(mem) = "" {
          count(mem) == 0
        }
        
        canonify_mem(orig) = new {
          is_string(orig)
          suffix := get_suffix(orig)
          raw := replace(orig, suffix, "")
          re_match("^[0-9]+$", raw)
          new := to_number(raw) * mem_multiple(suffix)
        }
        
        violation[{"msg": msg}] {
          general_violation[{"msg": msg, "field": "containers"}]
        }
        
        violation[{"msg": msg}] {
          general_violation[{"msg": msg, "field": "initContainers"}]
        }
        
        general_violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          not is_exempt(container)
          provided := container.resources
          required_fields := ["requests", "limits"]
          missing_field := required_fields[_]
          missing(provided, missing_field)
          msg := sprintf("container <%v> does not have <%v> defined", [container.name, missing_field])
        }
        
        general_violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          not is_exempt(container)
          provided := container.resources
          required_fields := ["requests", "limits"]
          missing_field := required_fields[_]
          provided[missing_field]
          required_resources := ["memory", "cpu"]
          missing_resource := required_resources[_]
          missing(provided[missing_field], missing_resource)
          msg := sprintf("container <%v> does not have <%v> <%v> defined", [container.name, missing_field, missing_resource])
        }
        
        is_exempt(container) {
          exempt_images := input.parameters.exemptImages
          img := container.image
          exemption := exempt_images[_]
          _matches_exemption(img, exemption)
        }
        
        _matches_exemption(img, exemption) {
          not endswith(exemption, "*")
          exemption == img
        }
        
        _matches_exemption(img, exemption) {
          endswith(exemption, "*")
          prefix := trim_suffix(exemption, "*")
          startswith(img, prefix)
        }
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: K8sRequiredResources
metadata:
  name: promptstrike-must-have-resources
  namespace: {{ include "promptstrike-sidecar.namespaceName" . }}
  labels:
    {{- include "promptstrike-sidecar.labels" . | nindent 4 }}
    app.kubernetes.io/component: opa-constraint
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment"]
    namespaces: [{{ .Values.namespace.name | quote }}]
  parameters:
    exemptImages: []
{{- end }}
{{- end }}